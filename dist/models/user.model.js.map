{"version":3,"sources":["../../src/models/user.model.js"],"names":["UserSchema","_id","type","Number","required","name","String","trim","enum","default","password","phone","unique","img","pushTokens","pre","next","account","isModified","salt","genSaltSync","hash","then","catch","console","log","err","methods","isValidPassword","newPassword","callback","user","compare","isMatch","set","transform","doc","ret","options","id","__v","initialize","connection","plugin","model","startAt"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,aAAa,qBAAW;AAC1BC,SAAM;AACFC,cAAOC,MADL;AAEFC,kBAAU;AAFR,KADoB;AAK1BC,UAAM;AACFH,cAAMI,MADJ;AAEFC,cAAK,IAFH;AAGFH,kBAAU;AAHR,KALoB;AAU1BF,UAAK;AACHA,cAAKI,MADF;AAEHE,cAAK,CAAC,OAAD,EAAS,QAAT,EAAkB,UAAlB,CAFF;AAGHC,iBAAQ;AAHL,KAVqB;AAe1BC,cAAU;AACNR,cAAMI,MADA;AAENF,kBAAU;AAFJ,KAfgB;AAmB1BO,WAAO;AACHT,cAAMI,MADH;AAEHF,kBAAU,IAFP;AAGHQ,gBAAQ,CAAC,IAAD,EAAO,kBAAP;AAHL,KAnBmB;AAwB1BC,SAAK,EAAE;AACHX,cAAMI,MADL;AAEDG,iBAAQ;AAFP,KAxBqB;AA4B1BK,gBAAW,CAAC;AACRZ,cAAKI;AADG,KAAD;;AA5Be,CAAX,CAAnB;;AAoCAN,WAAWe,GAAX,CAAe,MAAf,EAAuB,UAAUC,IAAV,EAAgB;AACnC,QAAMC,UAAU,IAAhB;AACA,QAAI,CAACA,QAAQC,UAAR,CAAmB,UAAnB,CAAL,EAAqC,OAAOF,MAAP;;AAErC,QAAMG,OAAO,mBAAOC,WAAP,EAAb;AACA,uBAAOC,IAAP,CAAYJ,QAAQP,QAApB,EAA8BS,IAA9B,EAAoCG,IAApC,CAAyC,gBAAQ;AAC7CL,gBAAQP,QAAR,GAAmBW,IAAnB;AACAL;AACH,KAHD,EAGGO,KAHH,CAGS;AAAA,eAAOC,QAAQC,GAAR,CAAYC,GAAZ,CAAP;AAAA,KAHT;AAIH,CATD;;AAcA1B,WAAW2B,OAAX,CAAmBC,eAAnB,GAAqC,UAAUC,WAAV,EAAuBC,QAAvB,EAAiC;AAClE,QAAIC,OAAO,IAAX;AACA,uBAAOC,OAAP,CAAeH,WAAf,EAA2BE,KAAKrB,QAAhC,EAA0C,UAAUgB,GAAV,EAAeO,OAAf,EAAwB;AAC9D,YAAIP,GAAJ,EACI,OAAOI,SAASJ,GAAT,CAAP;AACJI,iBAAS,IAAT,EAAeG,OAAf;AACH,KAJD;AAKH,CAPD;;AAUAjC,WAAWkC,GAAX,CAAe,QAAf,EAAyB;AACrBC,eAAW,mBAAUC,GAAV,EAAeC,GAAf,EAAoBC,OAApB,EAA6B;AACpCD,YAAIE,EAAJ,GAASF,IAAIpC,GAAb;;AAEA,eAAOoC,IAAI3B,QAAX;AACA,eAAO2B,IAAIvB,UAAX;AACA,eAAOuB,IAAIpC,GAAX;AACA,eAAOoC,IAAIG,GAAX;AACH;AARoB,CAAzB;;AAWA,gCAAcC,UAAd,CAAyB,mBAASC,UAAlC;AACA1C,WAAW2C,MAAX,CAAkB,gCAAcA,MAAhC,EAAyC;AACrCC,WAAO,MAD8B;AAErCC,aAAS;AAF4B,CAAzC;;kBAKe,mBAASD,KAAT,CAAe,MAAf,EAAuB5C,UAAvB,C","file":"user.model.js","sourcesContent":["import mongoose , { Schema } from \"mongoose\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport autoIncrement from 'mongoose-auto-increment';\r\n\r\nconst UserSchema = new Schema({\r\n    _id : {\r\n        type : Number, \r\n        required :true\r\n    },  \r\n    name: {\r\n        type: String,\r\n        trim:true,\r\n        required: true\r\n    },\r\n    type:{\r\n      type:String,\r\n      enum:[\"ADMIN\",\"NORMAL\",\"PROVIDER\"],\r\n      default:\"NORMAL\"\r\n    },\r\n    password: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    phone: {\r\n        type: String,\r\n        required: true,\r\n        unique: [true, \"Duplicated Phone\"]\r\n    },\r\n    img: { // url \r\n        type: String,\r\n        default:\"https://image.flaticon.com/icons/svg/190/190600.svg\"\r\n    },\r\n    pushTokens:[{\r\n        type:String\r\n    }]\r\n\r\n});\r\n\r\n\r\n\r\nUserSchema.pre(\"save\", function (next) {\r\n    const account = this;\r\n    if (!account.isModified('password')) return next();\r\n\r\n    const salt = bcrypt.genSaltSync();\r\n    bcrypt.hash(account.password, salt).then(hash => {\r\n        account.password = hash;\r\n        next();\r\n    }).catch(err => console.log(err));\r\n});\r\n\r\n\r\n\r\n\r\nUserSchema.methods.isValidPassword = function (newPassword, callback) {\r\n    let user = this;\r\n    bcrypt.compare(newPassword,user.password, function (err, isMatch) {\r\n        if (err)\r\n            return callback(err);\r\n        callback(null, isMatch);\r\n    })\r\n};\r\n\r\n\r\nUserSchema.set('toJSON', {\r\n    transform: function (doc, ret, options) {\r\n        ret.id = ret._id;\r\n\r\n        delete ret.password;\r\n        delete ret.pushTokens;\r\n        delete ret._id;\r\n        delete ret.__v;\r\n    }\r\n});\r\n\r\nautoIncrement.initialize(mongoose.connection);\r\nUserSchema.plugin(autoIncrement.plugin,  {\r\n    model: 'user',\r\n    startAt: 1,\r\n});\r\n\r\nexport default mongoose.model(\"user\", UserSchema) ;"]}