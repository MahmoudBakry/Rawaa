{"version":3,"sources":["../../src/controllers/user.controller.js"],"names":["jwtSecret","generateToken","sign","sub","id","iss","iat","Date","getTime","expiresIn","checkPhone","phoneno","inputtxt","match","Error","validateBody","isUpdate","exists","withMessage","custom","value","req","user","phone","userQuery","_id","$ne","userPhoneQuery","findOne","signUp","res","next","validationErrors","array","length","file","body","img","create","createdUser","status","send","token","signin","console","log","type"],"mappings":"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","file":"user.controller.js","sourcesContent":["import User from \"../models/user.model\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport config from \"../config\";\r\nimport { body, validationResult } from 'express-validator/check';\r\nimport mongoose, { Schema } from \"mongoose\";\r\nimport ApiError from '../helpers/ApiError'\r\nimport {multerSaveTo} from '../services/multer'\r\nimport {toImgUrl} from '../utils/index'\r\n\r\n\r\nconst { jwtSecret } = config;\r\nconst generateToken = id => {\r\n\r\n    return jwt.sign({\r\n        sub: id,\r\n        iss: 'App',\r\n        iat: new Date().getTime(),\r\n    }, jwtSecret, { expiresIn: '10000s' })\r\n}\r\n\r\n\r\n//function check phone regular exression \r\n//this function support \r\n// +XX-XXXX-XXXX  \r\n// +XX.XXXX.XXXX  \r\n// +XX XXXX XXXX \r\nconst checkPhone = inputtxt => {\r\n    var phoneno = /^[\\+]?[(]?[0-9]{3}[)]?[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{4,6}$/;\r\n    if (inputtxt.match(phoneno)) {\r\n        return true;\r\n    }\r\n    else {\r\n        throw new Error(\"invalid phone\")\r\n    }\r\n}\r\nexport default {\r\n    validateBody(isUpdate = false) {\r\n        return [\r\n            body(\"name\").exists().withMessage(\"name is required\"),\r\n            body(\"password\").exists().withMessage(\"password is required\"),\r\n            body(\"phone\").exists().withMessage(\"phone is requires\")\r\n                //make custome validation to phone to check on phone[unique, isPhone]\r\n                .custom(async (value, { req }) => {\r\n                    //call phone checking pattren function \r\n                    checkPhone(value);\r\n                    if (isUpdate && req.user.phone == value)\r\n                        userQuery._id = { $ne: req.user._id };\r\n                    let userPhoneQuery = { phone: value };\r\n                    let user = await User.findOne(userPhoneQuery);\r\n                    if (user)\r\n                        throw new Error('phone already exists');\r\n                    else\r\n                        return true\r\n                })\r\n        ];\r\n    },\r\n    //signup logic \r\n    async signUp(req, res, next) {\r\n        const validationErrors = validationResult(req).array();\r\n        if (validationErrors.length > 0)\r\n            return next(new ApiError(422, validationErrors));\r\n        try {\r\n            if(req.file){\r\n                req.body.img = await toImgUrl(req.file)\r\n            }\r\n            let createdUser = await User.create(req.body);\r\n            res.status(201).send({ user: createdUser, token: generateToken(createdUser.id) });\r\n        } catch (err) {\r\n            next(err);\r\n        }\r\n    },\r\n\r\n    //sign in logic \r\n    async signin(req, res, next) {\r\n        let user = req.user; // Passport\r\n        console.log(user.type)\r\n        res.send({ user, token: generateToken(user.id) });\r\n    },\r\n}"]}