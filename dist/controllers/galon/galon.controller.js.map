{"version":3,"sources":["../../../src/controllers/galon/galon.controller.js"],"names":["validateBody","isUpdate","exists","withMessage","createGalon","req","res","next","validationErrors","array","length","user","type","file","body","img","_id","create","newDoc","status","json","allGalons","limit","parseInt","query","page","count","docsCount","find","populate","skip","sort","creationDate","allDocs","send","Math","ceil"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;AACA;;;;AACA;;;;;;;;kBAGe;AAEXA,gBAFW,0BAEoB;AAAA,YAAlBC,QAAkB,uEAAP,KAAO;;AAC3B,eAAO,CACH,iBAAK,MAAL,EAAaC,MAAb,GAAsBC,WAAtB,CAAkC,6BAAlC,CADG,EAEH,iBAAK,OAAL,EAAcD,MAAd,GAAuBC,WAAvB,CAAmC,2BAAnC,CAFG,CAAP;AAIH,KAPU;;AAQX;AACMC,eATK,uBASOC,GATP,EASYC,GATZ,EASiBC,IATjB,EASuB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACxBC,4CADwB,GACL,6BAAiBH,GAAjB,EAAsBI,KAAtB,EADK;;AAAA,kCAE1BD,iBAAiBE,MAAjB,GAA0B,CAFA;AAAA;AAAA;AAAA;;AAAA,6DAGnBH,KAAK,uBAAa,GAAb,EAAkBC,gBAAlB,CAAL,CAHmB;;AAAA;AAAA;;AAK1B,gCAAI,EAAEH,IAAIM,IAAJ,CAASC,IAAT,IAAiB,UAAnB,CAAJ,EAAoC;AAChCL,qCAAK,uBAAa,GAAb,EAAkB,mBAAlB,CAAL;AACH;;AAPyB,iCAQtBF,IAAIQ,IARkB;AAAA;AAAA;AAAA;;AAAA;AAAA,mCASD,qBAASR,IAAIQ,IAAb,CATC;;AAAA;AAStBR,gCAAIS,IAAJ,CAASC,GATa;AAAA;AAAA;;AAAA;AAWtBR,iCAAK,uBAAa,GAAb,EAAkB,iBAAlB,CAAL;;AAXsB;AAa1BF,gCAAIS,IAAJ,CAASH,IAAT,GAAgBN,IAAIM,IAAJ,CAASK,GAAzB;AAb0B;AAAA,mCAcP,gBAAMC,MAAN,CAAaZ,IAAIS,IAAjB,CAdO;;AAAA;AActBI,kCAdsB;AAAA,6DAenBZ,IAAIa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,MAArB,CAfmB;;AAAA;AAAA;AAAA;;AAiB1BX;;AAjB0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBjC,KA5BU;;;AA8BX;AACMc,aA/BK,qBA+BKhB,GA/BL,EA+BUC,GA/BV,EA+BeC,IA/Bf,EA+BqB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACtBe,iCADsB,GACdC,SAASlB,IAAImB,KAAJ,CAAUF,KAAnB,KAA6B,EADf;AAEtBG,gCAFsB,GAEfpB,IAAImB,KAAJ,CAAUC,IAAV,IAAkB,CAFH;AAGxBD,iCAHwB,GAGhB,EAHgB;AAAA;AAAA;AAAA,mCAKF,gBAAME,KAAN,CAAYF,KAAZ,CALE;;AAAA;AAKpBG,qCALoB;AAAA;AAAA,mCAMJ,gBAAMC,IAAN,CAAWJ,KAAX,EAAkBK,QAAlB,CAA2B,MAA3B,EACfC,IADe,CACTL,OAAOH,KAAR,GAAiBA,KADP,EACcA,KADd,CACoBA,KADpB,EAC2BS,IAD3B,CACgC,EAAEC,cAAc,CAAC,CAAjB,EADhC,CANI;;AAAA;AAMpBC,mCANoB;AAAA,8DAQjB3B,IAAI4B,IAAJ,CAAS,0BACZD,OADY,EAEZR,IAFY,EAGZU,KAAKC,IAAL,CAAUT,YAAYL,KAAtB,CAHY,EAIZA,KAJY,EAKZK,SALY,EAMZtB,GANY,CAAT,CARiB;;AAAA;AAAA;AAAA;;AAiBxBE;;AAjBwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmB/B;AAlDU,C","file":"galon.controller.js","sourcesContent":["import Galon from '../../models/galon.model';\r\nimport mongoose from 'mongoose';\r\nimport { body, validationResult } from 'express-validator/check';\r\nimport { toImgUrl } from '../../utils/index'\r\nimport ApiError from '../../helpers/ApiError'\r\nimport ApiResponse from '../../helpers/ApiResponse'\r\n\r\n\r\nexport default {\r\n\r\n    validateBody(isUpdate = false) {\r\n        return [\r\n            body(\"size\").exists().withMessage(\"numberOfBottles is required\"),\r\n            body(\"price\").exists().withMessage(\"sizeOfBottles is required\")\r\n        ];\r\n    },\r\n    //create new galon\r\n    async createGalon(req, res, next) {\r\n        const validationErrors = validationResult(req).array();\r\n        if (validationErrors.length > 0)\r\n            return next(new ApiError(422, validationErrors));\r\n        try {\r\n            if (!(req.user.type == \"PROVIDER\")) {\r\n                next(new ApiError(403, 'not provider user'))\r\n            }\r\n            if (req.file) {\r\n                req.body.img = await toImgUrl(req.file)\r\n            } else {\r\n                next(new ApiError(422, 'img is required'))\r\n            }\r\n            req.body.user = req.user._id\r\n            let newDoc = await Galon.create(req.body);\r\n            return res.status(201).json(newDoc);\r\n        } catch (err) {\r\n            next(err)\r\n        }\r\n    },\r\n\r\n    //retrive all galons \r\n    async allGalons(req, res, next) {\r\n        const limit = parseInt(req.query.limit) || 20;\r\n        const page = req.query.page || 1;\r\n        let query = {}\r\n        try {\r\n            let docsCount = await Galon.count(query)\r\n            let allDocs = await Galon.find(query).populate('user')\r\n                .skip((page * limit) - limit).limit(limit).sort({ creationDate: -1 });\r\n            return res.send(new ApiResponse(\r\n                allDocs,\r\n                page,\r\n                Math.ceil(docsCount / limit),\r\n                limit,\r\n                docsCount,\r\n                req\r\n            ))\r\n        } catch (err) {\r\n            next(err)\r\n        }\r\n    },\r\n\r\n    //retrive \r\n}"]}