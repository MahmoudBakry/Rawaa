{"version":3,"sources":["../../../src/controllers/cartona/cartona.controller.js"],"names":["validateBody","isUpdate","exists","withMessage","createCartona","req","res","next","validationErrors","array","length","user","type","file","body","img","_id","create","newDoc","status","json","allCartones","limit","parseInt","query","page","typeOfSize","count","docsCount","find","populate","skip","sort","creationDate","allDocs","send","Math","ceil","updateCartona","cartonID","params","findById","carton","id","update","$set","numberOfBottles","sizeOfBottles","price","minimumNumberOnOrder","newCartonw","cartonDetails","cartonId","end"],"mappings":"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","file":"cartona.controller.js","sourcesContent":["import Cartona from '../../models/cartona.model';\r\nimport mongoose from 'mongoose';\r\nimport { body, validationResult } from 'express-validator/check';\r\nimport { toImgUrl } from '../../utils/index'\r\nimport ApiError from '../../helpers/ApiError'\r\nimport ApiResponse from '../../helpers/ApiResponse'\r\n\r\nexport default {\r\n    validateBody(isUpdate = false) {\r\n        return [\r\n            body(\"numberOfBottles\").exists().withMessage(\"numberOfBottles is required\"),\r\n            body(\"sizeOfBottles\").exists().withMessage(\"sizeOfBottles is required\"),\r\n            // body(\"img\").exists().withMessage(\"img is required\"),\r\n            body(\"price\").exists().withMessage(\"price is required\"),\r\n        ];\r\n    },\r\n    //create new cartona product\r\n    async createCartona(req, res, next) {\r\n        const validationErrors = validationResult(req).array();\r\n        if (validationErrors.length > 0)\r\n            return next(new ApiError(422, validationErrors));\r\n        try {\r\n            if (!(req.user.type == \"PROVIDER\")) {\r\n                next(new ApiError(403, 'not provider user'))\r\n            }\r\n\r\n            if (req.file) {\r\n                req.body.img = await toImgUrl(req.file)\r\n            } else {\r\n                next(new ApiError(422, 'img is required'))\r\n            }\r\n            req.body.user = req.user._id\r\n            let newDoc = await Cartona.create(req.body);\r\n            return res.status(201).json(newDoc);\r\n        } catch (err) {\r\n            next(err)\r\n        }\r\n    },\r\n    //retrive all cartona products \r\n    async allCartones(req, res, next) {\r\n        const limit = parseInt(req.query.limit) || 20;\r\n        const page = req.query.page || 1;\r\n        let query = {}\r\n        if (req.query.typeOfSize)\r\n            query.typeOfSize = req.query.typeOfSize\r\n        try {\r\n            let docsCount = await Cartona.count(query)\r\n            let allDocs = await Cartona.find(query).populate('user')\r\n                .skip((page * limit) - limit).limit(limit).sort({ creationDate: -1 });\r\n            return res.send(new ApiResponse(\r\n                allDocs,\r\n                page,\r\n                Math.ceil(docsCount / limit),\r\n                limit,\r\n                docsCount,\r\n                req\r\n            ))\r\n        } catch (err) {\r\n            next(err)\r\n        }\r\n    },\r\n    //update cartone\r\n    async updateCartona(req, res, next) {\r\n        const cartonID = req.params.cartonID;\r\n        try {\r\n            let carton = await Cartona.findById(cartonID)\r\n            if (!(req.user.id == carton.user)) {\r\n                return next(new ApiError(403, \"not have access to this resourse\"))\r\n            }\r\n\r\n            if (req.file) {\r\n                req.body.img = await toImgUrl(req.file)\r\n            }\r\n            await Cartona.update({ _id: cartonID }, {\r\n                $set: {\r\n                    numberOfBottles: req.body.numberOfBottles || carton.numberOfBottles,\r\n                    sizeOfBottles: req.body.sizeOfBottles || carton.sizeOfBottles,\r\n                    typeOfSize: req.body.typeOfSize || carton.typeOfSize,\r\n                    price: req.body.price || carton.price,\r\n                    img: req.body.img || carton.img,\r\n                    minimumNumberOnOrder: req.body.minimumNumberOnOrder || carton.minimumNumberOnOrder,\r\n                }\r\n            })\r\n            let newCartonw = await Cartona.findById(carton)\r\n                .populate('user')\r\n            return res.status(200).json(newCartonw)\r\n        } catch (err) {\r\n            next(err)\r\n        }\r\n    },\r\n\r\n    //retrive one cartone details \r\n    async cartonDetails(req, res, next) {\r\n        try {\r\n            if (!req.params.cartonID)\r\n                next(new ApiError(422, \"missed cartonID\"))\r\n            const cartonId = req.params.cartonID;\r\n            let carton = await Cartona.findById(cartonId).populate('user')\r\n            if (!carton) {\r\n                return res.status(404).end();\r\n            }\r\n            return res.status(200).json(carton)\r\n        } catch (err) {\r\n            next\r\n        }\r\n    }\r\n\r\n}\r\n"]}